работа с регулятором + мотор
#include <Stepper.h>
#include <GyverPID.h>
#include <PIDtuner.h>
#include <PIDtuner2.h>
int sensorPin = A0;
Stepper myStepper(200, 8, 9); // пины двигла
GyverPID regulator(0.5, 0.5, 0, 100);
void setup() {
   Serial.begin(9600);
//  regulator.setMode(ON_ERROR);
  myStepper.setSpeed(1000);          // скорость двигла
  regulator.setDirection(NORMAL); // направление регулирования (NORMAL/REVERSE). ПО УМОЛЧАНИЮ СТОИТ NORMAL
  regulator.setLimits(-200, 200);    // пределы поставил шаги двигателя
  regulator.setpoint = 150;        // сообщаем регулятору температуру, которую он должен поддерживать
}

void loop() {
   int temp = analogRead(sensorPin);
   int value = (map(temp, 0, 1023, 0, 200));
   Serial.println(value);
   if (value != regulator.setpoint)
      {
      regulator.input = value;
      myStepper.step(regulator.getResultTimer());
      }

}

rotate stepper in while
#include <Stepper.h>
Stepper myStepper(200, 8, 9);
const int buttonPin = 13;

void setup() {
  myStepper.setSpeed(1000);
  pinMode (13, INPUT);
}

void loop() {
   int buttonState = digitalRead(buttonPin);
//    if (buttonState == HIGH){myStepper.step(20);}
   while (buttonState == LOW){
    buttonState = digitalRead(buttonPin);
    myStepper.step(20);
    }
}



// аналог пины
#define P_in 0
#define P_out 1
#define POS 2

// дигит пины
//#define STEP_1 2
//#define STEP_2 3
#define OPEN 13
#define CLOSE 12

#include "Stepper.h"
#include <GyverPID.h>
#include "GParser.h"
#include "AsyncStream.h"  // асинхронное чтение сериал
AsyncStream<50> serial(&Serial, ';');
Stepper myStepper(200, 8, 9);
GyverPID regulator(0.5, 0.5, 0);
int p_min = 0;
int p_max = 7;
int p_reg = 0;
int state_open;
int state_close;


void setup() {
  Serial.begin(115200);
  myStepper.setSpeed(1000);
  regulator.setDirection(NORMAL);
  regulator.setLimits(-200, 200);
  regulator.setpoint = p_reg;
  pinMode(13, 1);
  pinMode(P_in, LOW);
  pinMode(P_out, LOW);
  pinMode(POS, LOW);
  pinMode(OPEN, LOW);
  pinMode(CLOSE, LOW);
}

// с ардуино на пк, терминатор \n
// 0,входное давление,выходное давление,энкодер
// 1, концевик открытия, концевик закрытия


// с пк на ардуино, терминатор ;
// 0,уставка давления минимального
// 1,уставка давления максимального
// 2,уставка давления регулирования
// 3,начать регулирование
// 4,остановить регулирование
// 5,открыть регулятор
// 6,закрыть регулятор

void loop() {
  parsing();

//  btn.tick();
  static uint32_t tmr = 0;
  if (millis() - tmr > 100) {
    tmr = millis();
    Serial.print(0);
    Serial.print(',');
    Serial.print(analogRead(P_in));
    Serial.print(',');
    Serial.print(analogRead(P_out));
    Serial.print(',');
    Serial.println(analogRead(POS));
  }

  static uint32_t tmr2 = 0;
  if (millis() - tmr2 > 50) {
    tmr2 = millis();
    Serial.print(2);
    Serial.print(',');
    Serial.print(digitalRead(OPEN));
    Serial.print(',');
    Serial.println(digitalRead(CLOSE));
  }

}

// функция парсинга, опрашивать в лупе
void parsing() {
  if (serial.available()) {
    GParser data(serial.buf, ',');  // отдаём парсеру
    int ints[10];           // массив для численных данных
    data.parseInts(ints);   // парсим в него

    switch (ints[0]) {
      case 0: p_min = ints[1];
        break;
      case 1:
        p_max = ints[1];
        break;
      case 2:
        p_reg = ints[1];
        break;
      case 3:
        //Начать регулирование
        regulate();
      case 4:
        //Остановить регулирование
        break;
      case 5:
        state_open = digitalRead(OPEN);
        while (state_open == LOW)
            {
              myStepper.step(200);
              state_open = digitalRead(OPEN);
             }
      case 6:
        state_close = digitalRead(CLOSE);
        while (state_close == LOW)
            {
              myStepper.step(-200);
              state_close = digitalRead(CLOSE);
             }
    }
  }
}

void regulate()
{
   int pressure = analogRead(P_out);
   int value = (map(pressure, 0, 1023, 0, 200));
   if (value != regulator.setpoint)
      {
      regulator.input = value;
      myStepper.step(regulator.getResultTimer());
      }
  }

 работа с энкодером
 #define CLK 2
 #define DT 3

 #include "GyverEncoder.h"
 Encoder enc1(CLK, DT);
 int value = 0;
 void setup() {
   Serial.begin(9600);
   enc1.setType(TYPE1);        // тип энкодера TYPE1 одношаговый, TYPE2 двухшаговый. Если ваш энкодер работает странно, смените тип\=
   enc1.setFastTimeout(40);    // таймаут на скорость isFastR. По умолч. 50
 }
 void loop() {
   // обязательная функция отработки. Должна постоянно опрашиваться
   enc1.tick();
   if (enc1.isRight()) value++;        // если был поворот направо, увеличиваем на 1
   if (enc1.isLeft()) value--;         // если был поворот налево, уменьшаем на 1
   if (enc1.isTurn()) {                // если был совершён поворот (индикатор поворота в любую сторону)
     Serial.println(value);            // выводим значение при повороте
   }
 }